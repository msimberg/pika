# Copyright (c) 2024 ETH Zurich
# Copyright (c) 2020 EXASOL
#
# SPDX-License-Identifier: BSL-1.0
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

name: Linux CI (tsan)

on:
  merge_group:
  pull_request:
  push:
    # branches:
    #   # Development and release branches
    #   - main
    #   - release**

jobs:
  build:
    name: github/linux/sanitizers/thread
    runs-on: ubuntu-latest
    container: pikaorg/pika-ci-base:22

    steps:
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 120
        with:
          detached: true
      - uses: actions/checkout@v4
      - name: Update apt repositories for ccache
        run: apt update
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-linux-sanitizers-thread
      - name: Configure
        shell: bash
        run: |
            cmake \
                . \
                -Bbuild \
                -GNinja \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_BUILD_TYPE=Debug \
                -DPIKA_WITH_MALLOC=system \
                -DPIKA_WITH_EXAMPLES=ON \
                -DPIKA_WITH_TESTS=ON \
                -DPIKA_WITH_TESTS_EXAMPLES=ON \
                -DPIKA_WITH_TESTS_HEADERS=OFF \
                -DPIKA_WITH_TESTS_MAX_THREADS=$(nproc) \
                -DPIKA_WITH_COMPILER_WARNINGS=ON \
                -DPIKA_WITH_COMPILER_WARNINGS_AS_ERRORS=ON \
                -DPIKA_WITH_SANITIZERS=On \
                -DCMAKE_CXX_FLAGS="-fsanitize=thread -fno-omit-frame-pointer" \
                -DPIKA_WITH_STACKOVERFLOW_DETECTION=Off \
                -DPIKA_WITH_CHECK_MODULE_DEPENDENCIES=On
      - name: Build
        if: always()
        shell: bash
        run: |
            cmake --build build --target examples
            cmake --build build --target tests
      - name: Test
        if: always()
        shell: bash
        run: |
            export TSAN_OPTIONS=suppressions=$PWD/tools/tsan.supp
            cd build
            ctest \
              --timeout 120 \
              --output-on-failure \
              -E "$(${GITHUB_WORKSPACE}/.github/blacklist_to_ctest_regex.sh ${GITHUB_WORKSPACE}/.github/workflows/linux_tsan_blacklist.txt)"
      - name: Test blacklisted tests
        if: always()
        continue-on-error: true
        shell: bash
        run: |
            export TSAN_OPTIONS=suppressions=$PWD/tools/tsan.supp
            cd build
            ctest \
              --timeout 120 \
              --output-on-failure \
              -R "$(${GITHUB_WORKSPACE}/.github/blacklist_to_ctest_regex.sh ${GITHUB_WORKSPACE}/.github/workflows/linux_tsan_blacklist.txt)"
